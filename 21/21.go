package main

import "fmt"

// целевой интерфейс, который ожидает клиент
type Targer interface {
	Request() string
}

// адаптируемый класс
type Adaptee struct{}

func (*Adaptee) SpecificRequest() string {
	return "Специфическая операция"
}

//адаптер, который приводит Adaptee к интерфейсу Target
type Adapter struct {
	adaptee *Adaptee
}

func (a *Adapter) Request() string {
	//переадресуем вызов к специфической операции Adaptee
	return a.adaptee.SpecificRequest()
}

func NewAdapter() *Adapter {
	return &Adapter{}
}

func main() {
	//создаем адаптируемый элемент
	adaptee := &Adaptee{}

	//создаем адаптор, передавая адаптиремый объект
	adapter := &Adapter{
		adaptee: adaptee,
	}

	//используем адаптер как целевой интерфейс
	fmt.Println(adapter.Request()) // выведет - специфическая операция

}

/*
Объяснение:

Целевой интерфейс (Target): Здесь интерфейс Target ожидает метод Request(), который возвращает строку.
Адаптируемый класс (Adaptee): Класс Adaptee имеет метод SpecificRequest(), который предоставляет необходимую информацию,
 но его интерфейс не совпадает с интерфейсом Target.
Адаптер (Adapter): Структура Adapter реализует интерфейс Target и делегирует выполнение метода Request() на SpecificRequest()
адаптируемого объекта Adaptee.

Паттерн адаптер полезен в следующих ситуациях:

Интеграция сторонних библиотек: Когда вы хотите использовать сторонние библиотеки или API, но их интерфейсы несовместимы с вашим приложением,
вы можете использовать адаптер для преобразования их интерфейсов.
Устаревшие системы: Если ваша система работает с устаревшими или устаревшими интерфейсами, паттерн адаптер поможет интегрировать эти компоненты
в современную архитектуру без необходимости переписывать код.
Гибкость и расширяемость: Паттерн адаптер позволяет добавлять новые компоненты и взаимодействовать с ними, не изменяя существующую кодовую базу.

Преимущества использования адаптера в Go

Инкапсуляция несовместимости: Вы можете работать с несовместимыми интерфейсами без необходимости их модификации.
Гибкость и расширяемость: Легко добавлять новые адаптируемые классы без изменения существующего кода.
Меньше изменений в коде: Вместо того, чтобы переписывать весь код для совместимости, вы просто создаете адаптер, что значительно сокращает время
и усилия на изменение системы.

Заключение

Паттерн адаптер в Go — это мощный инструмент для решения проблемы несовместимости интерфейсов, позволяющий использовать классы с разными
интерфейсами в одном контексте. Это делает код гибким и расширяемым, а также помогает интегрировать сторонние компоненты без необходимости
их переписывания.

*/
